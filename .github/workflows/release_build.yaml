# Reference:
# https://eugene-babichenko.github.io/blog/2020/05/09/github-actions-cross-platform-auto-releases/
# https://github.com/sharkdp/bat/blob/master/.github/workflows/CICD.yml
# https://github.com/BurntSushi/ripgrep/blob/master/.github/workflows/release.yml

# This workflow creates all the needed binaries, uploads the binaries to github releases and updates the crate as well as the
# homebrew tap.
# The binaries include versions from linux x86_64 and arm, windows gnu and mscv and macos x86_64 and arm versions.
# It also creates a .deb package using the cargo-deb crate.

name: Build Release files
on:
  #switch for debugging
  # [push]
  release:
    types: [published]
  release_assets_macos:
    name: Release MacOS Assets
    runs-on: ${{ matrix.platform }}
    strategy:
      matrix:
        platform: [macos-latest]
        rust:
          - stable
        target:
          #compile for x86 mac os
          - x86_64-apple-darwin
          #compile arm version for M1 macs (BigSur+)
          - aarch64-apple-darwin
    steps:
      - name: Checkout code
        uses: actions/checkout@v1

      - name: Install ${{ matrix.rust }} toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          override: true
      #use caching for cargo build
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build artem release
        uses: actions-rs/cargo@v1
        continue-on-error: false
        with:
          command: build
          use-cross: true
          args: --locked --release --verbose --target=${{ matrix.target }}

      - name: Extract Version Number
        shell: bash
        run: echo "PROJECT_VERSION=$(sed -n 's/^version = "\(.*\)"/\1/p' Cargo.toml | head -n1)" >> $GITHUB_ENV

      - name: Copy completion files and man page
        shell: bash
        run: |
          #create a completions and doc folder
          mkdir -p deployment/completions
          mkdir -p deployment/doc
          #copy completion files and man page
          cp target/*/release/build/artem-*/out/* deployment/completions/
          # replace the input file completions, since it won't work after inputting the paths otherwise
          sed -i "" "s/*::/*:/" deployment/completions/_artem
          #move man page and CHANGELOG/README to doc folder
          mv deployment/completions/artem.1 deployment/doc/
          mv CHANGELOG.md deployment/doc/
          mv README.md deployment/
          #copy binary file
          cp target/*/release/artem deployment

      - name: Compress release files
        shell: bash
        run: |
          #compress deployment directory
          cd deployment/
          tar -czvf ../artem-v$PROJECT_VERSION-${{ matrix.target }}.tar.gz *

      - name: Upload Release Build
        uses: softprops/action-gh-release@v1
        with:
          files: artem-v${{ env.PROJECT_VERSION }}-${{ matrix.target }}.tar.gz
          draft: true
          prerelease: true

  release_deb:
